<?php
/**
 * Amazon Payments
 *
 * @category    Amazon
 * @package     Amazon_Payments
 * @copyright   Copyright (c) 2014 Amazon.com
 * @license     http://opensource.org/licenses/Apache-2.0  Apache License, Version 2.0
 */
?>

<div id="amazon-checkout">

    <div class="page-title">
        <h1><?php echo $this->__('Checkout') ?></h1>
    </div>

    <?php echo $this->__('Amazon Payments uses information from your Amazon account to place your order.'); ?>
    <?php echo $this->__('Click <a href="#" id="amazon-cancel">here</a> to change your payment method.'); ?>


    <div id="checkout-amazon-payments">
        <div id="checkout-amazon-columns">

            <div id="col-1-amz" class="col-amz">

                <div id="amazon-widget-address-wrapper" class="amazon-widget-wrapper">
                    <h2><?php echo $this->__('Shipping Address'); ?></h2>
                    <div class="amz-widget-loader" style="display:none;"></div>
                    <div id="amazon-widget-address"></div>
                </div>

                <?php if ($this->getChild('shipping_method')->isShow()) : ?>
                    <div id="shipping-method-wrapper">
                        <div id="shipping-method-disable" style="display:none;"></div>
                        <?php echo $this->getChildHtml('shipping_method') ?>
                    </div>
                <?php endif; ?>

            </div>

            <div id="col-2-amz" class="col-amz">

                <div id="amazon-widget-wrapper" class="amazon-widget-wrapper">
                    <h2><?php echo $this->__('Payment'); ?></h2>
                    <div class="amz-widget-loader" style="display:none;"></div>
                    <div id="amazon-widget-wallet"></div>
                </div>

            </div>


            <div id="col-3-amz" class="col-amz">
                <h2><?php echo $this->__('Order Summary'); ?></h2>

                <div id="amz-review-loader" style="display:none;"></div>

                <?php echo $this->getChildHtml('review') ?>

                <?php if ($this->helper('amazon_payments')->isAmazonSandbox()) : ?>
                <br />
                <h3><?php echo $this->__('Authorization Sandbox Simulation:'); ?></h3>
                <textarea id="sandbox"></textarea>
                <?php echo $this->__('Example:') ?>
                <small>
                 	{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod"}}
                  <br />
                  (<a href="https://payments.amazon.com/documentation/lpwa/201749840#201750790" target="_blank"><?php echo $this->__('More Info') ?></a>)<br />
                </small>


                <?php endif; ?>
            </div>

        </div>
    </div>

</div>

<script>

// Cancel and log user out of Amazon
$('amazon-cancel').observe("click", function() {
  amazon.Login.logout();
  window.top.location.href = "<?php echo $this->getUrl('amazon_payments/checkout/clear'); ?>";
});


var AmazonPaymentsMageCheckout = Class.create();
AmazonPaymentsMageCheckout.prototype = {
    initialize: function(opts){
        this.opts = opts;
        this.hasPayment = false;
        this.hasReviewLoader = false;
        this.giftwrapped = false;
        this.asynchronous = true;
    },

    // Set events for ee giftwrapping
    setGiftWrappingEvents: function() {

        Event.observe($('allow_gift_options'), 'change', this.checkGiftOption.bindAsEventListener(this));

        $$('allow_gift_options').each(function(el){
            Event.observe(el, 'change', this.setGiftWrapping.bindAsEventListener(this));
        }, this);

        $$('select=[id^="giftwrapping_"]').each(function(el){
            Event.observe(el, 'change', this.setGiftWrapping.bindAsEventListener(this));
        }, this);

        $$('input=[id^="add-printed-card"]').each(function(el){
            Event.observe(el, 'change', this.setGiftWrapping.bindAsEventListener(this));
        }, this);
    },

    // observe the gift option checkbox to set totals
    checkGiftOption: function(transporter){
        if (!transporter.srcElement.checked){
            this.giftwrapped = false;
            this.setReview(transporter);
        }else{
            this.giftwrapped = true;
        }
    },

    // observe the giftwrap option dropdown to update totals
    setGiftWrapping: function(transporter){
        this.setReview(transporter);
    },

    // Dynamically load shipping method HTML
    setShippingMethod: function() {
        if (this.opts.shippingMethod) {
            this.restrictPlaceOrder(true);

            var request = new Ajax.Request(this.opts.shippingMethod.url, {
                method: 'post',
                parameters: { "amazon_order_reference_id": this.amazonOrderReferenceId },
                onSuccess: this.renderShippingMethod.bindAsEventListener(this, this.opts.shippingMethod.id)
            });
        }
        else {
            this.setReview();
        }
    },


    // Dynamically load review HTML
    setReview: function() {
        var btnSubmit = $$(".button.btn-checkout");

        var shippingMethod = $$('input:checked[type=radio][name=shipping_method]')[0];

        if (shippingMethod != undefined) {
            shippingMethod = shippingMethod.value;
        }
        else {
            var firstMethodRadio = $$('input[type=radio][name=shipping_method]').first();
            if (firstMethodRadio != undefined) {
                firstMethodRadio.checked = "checked";
                shippingMethod = firstMethodRadio.value;
            }
        }


        var requestParams = [{
            "shipping_method"               : shippingMethod,
            "amazon_order_reference_id"     : this.amazonOrderReferenceId
        }];

        /**
         * Change to implement EE gift wrapping
         * If giftwrapping element doesn't exixt, then revert to CE gift message
         */
        if(this.giftwrapped) {
            requestParams[0]['allow_gift_options'] = '1';

            if($('allow_gift_options_for_order').checked){ requestParams[0]['allow_gift_options_for_order'] = '1'; }
            if($('allow_gift_options_for_items').checked){ requestParams[0]['allow_gift_options_for_items'] = '1'; }
            $$('select=[id^="giftwrapping_"]').each(function (el) { requestParams[0][el.name] = el.selectedOptions[0].value; });

            $$('input=[name^="giftwrapping"]').each(function (el) {
                if (el.type == 'checkbox') {
                    if (el.checked) {
                        requestParams[0][el.name] = '1';
                    }
                }
            });

            $$('input=[name^="giftoptions"]').each(function (el) { requestParams[0][el.name] = el.value; });
            $$('input=[name^="giftmessage"]').each(function (el) { requestParams[0][el.name] = el.value; });
            $$('textarea=[name^="giftmessage"]').each(function (el) { requestParams[0][el.name] = el.value; });
        }else if($('allow_gift_options') != null) {
            requestParams[0]['allow_gift_options'] = '';
            requestParams[0]['allow_gift_options_for_order'] = '';
            requestParams[0]['allow_gift_options_for_items'] = '';
            $$('select=[id^="giftwrapping_"]').each(function (el) { requestParams[0][el.name] = ''; });
            $$('input=[name^="giftoptions"]').each(function (el) { requestParams[0][el.name] = el.value; });
            $$('input=[name^="giftmessage"]').each(function (el) { requestParams[0][el.name] = ''; });
            $$('textarea=[name^="giftmessage"]').each(function (el) {  requestParams[0][el.name] = ''; });
        }else {
            requestParams[0]['allow_gift_messages'] = ($('allow_gift_messages').checked)?('1'):('');
            requestParams[0]['allow_gift_messages_for_order'] = ($('allow_gift_messages_for_order').checked)?('1'):('');
            requestParams[0]['allow_gift_messages_for_items'] = ($('allow_gift_messages_for_items').checked)?('1'):('');
            $$('input=[name^="giftoptions"]').each(function (el) { requestParams[0][el.name] = el.value; });
            $$('input=[name^="giftmessage"]').each(function (el) { requestParams[0][el.name] = el.value; });
            $$('textarea=[name^="giftmessage"]').each(function (el) {  requestParams[0][el.name] = el.value; });
        }

        this.restrictPlaceOrder(true);

        var request = new Ajax.Request(this.opts.review.url, {
            method: 'post',
            asynchronous: this.asynchronous,
            parameters: requestParams[0],
            onSuccess: this.renderReview.bindAsEventListener(this, this.opts.review.id)
        });
    },

    // Render shipping method, then load Review
    renderShippingMethod: function(transport, id) {
        $(id).update(transport.responseText);

        $$('input[type="radio"][name="shipping_method"]').each(function(el){
            Event.observe(el, 'change', this.setReview.bindAsEventListener(this));
       }, this);

        if($('allow_gift_options') != null){
            this.setGiftWrappingEvents();
        }

       this.setReview();
    },

    renderReview: function(transport, id) {
        $(id).update(transport.responseText);
        $$(".button.btn-checkout").invoke('writeAttribute','onclick', 'amazonPaymentsMageCheckout.saveOrder()');
        this.agreementsForm = $('checkout-agreements')
        $("amz-review-loader").hide();
        this.restrictPlaceOrder(false);
    },

    saveOrder: function() {
      var params = {};

      this.asynchronous = false;
      this.setReview();

      if (this.agreementsForm) {
          params += '&'+Form.serialize(this.agreementsForm);
      }
      params.save = true;

      params.amazon_order_reference_id = this.amazonOrderReferenceId;

      var sandbox = $('sandbox');
      if (sandbox) {
          params.sandbox = sandbox.getValue();
      }

      this.restrictPlaceOrder(true);
      this.restrictWidgets(true);

      var request = new Ajax.Request(this.opts.save.url, {
          method: 'post',
          parameters: params,
          onSuccess: this.onSaveOrder.bindAsEventListener(this)
      });
    },

    onSaveOrder: function(transport) {
        try{
            response = eval('(' + transport.responseText + ')');
        }
        catch (e) {
            response = {};
        }

        if (response.redirect) {
            this.isSuccess = true;
            window.top.location.href = response.redirect;
            return;
        }
        if (response.success) {
            this.isSuccess = true;
            window.top.location.href = this.successUrl;
        }
        else{

            this.restrictPlaceOrder(false);
            this.restrictWidgets(false);

            var msg = response.error_messages;
            if (typeof(msg)=='object') {
                msg = msg.join("\n");
            }
            if (msg) {
                alert(msg);
            }

            // Widget reload requried
            if (msg.indexOf("TransactionTimedOut") != -1) {
                location.reload();
            }
            else if (msg.indexOf("terms and conditions") == -1) {
                setTimeout(loadAmazonWallet, 2000); // Refresh Wallet
            }

            if (msg.indexOf("Declined") != -1) {
                this.restrictShipping();
            }

        }

    },

    restrictPlaceOrder: function(isDisabled, hideLoader) {
        var btn = $$(".button.btn-checkout");
        var review = $("checkout-review-table-wrapper");
        var loader = $("amz-review-loader");

        if (isDisabled) {
            if (review) {
                review.setOpacity(0.5);
                if (!hideLoader) {
                    loader.show();
                    this.hasReviewLoader = true;
                }
            }
            btn.each(function(el, i) { el.disable(); });
        } else {
            if (review) {
                review.setOpacity(1);
                loader.hide();
                this.hasReviewLoader = false;
            }
            btn.each(function(el, i) { el.enable(); });
        }
    },

    restrictWidgets: function(isDisabled) {
        var widget    = $$(".amazon-widget-wrapper .widget-container, #shipping-method-wrapper");
        var loader    = $$(".amz-widget-loader");
        var smdisable = $("shipping-method-disable");

        if (isDisabled) {
            widget.each(function(el, i) {
                el.setOpacity(0.5);
                el.setStyle({"pointer-events" : "none"});
            });
            loader.each(function(el, i) {
                el.show();
            });
            if (smdisable) {
                smdisable.show();
            }
        } else {
            widget.each(function(el, i) {
                el.setOpacity(1);
                el.setStyle({"pointer-events" : "auto"});
            });
            loader.each(function(el, i) {
                el.hide();
            });
            if (smdisable) {
                smdisable.hide();
            }
        }
    },

    restrictShipping: function() {
        clearInterval(restrictInterval);

        $$("#shipping-method-wrapper, #amazon-widget-address-wrapper").each(function(el, i) {
            el.setOpacity(0.5);
            //el.setStyle({"pointer-events" : "none"});
        });
        $$("#amazon-widget-address-wrapper .amz-widget-loader").each(function(el, i) {
            el.show();
            el.setStyle({"background" : "none"});
        });
        $("shipping-method-disable").show();
    }
};

var opts = {
  <?php if ($this->getChild('shipping_method')->isShow()) : ?>
  shippingMethod : {
      id: "checkout-shipping-method-load",
      url: "<?php echo $this->getUrl('checkout/amazon_payments/shippingMethod') ?>"
  },
  <?php endif; ?>
  review : {
      id: "checkout-review-load",
      url: "<?php echo $this->getUrl('checkout/amazon_payments/review') ?>"
  },
  save : {
      url: "<?php echo $this->getUrl('checkout/amazon_payments/saveOrder') ?>"
  }
}


var amazonPaymentsMageCheckout = new AmazonPaymentsMageCheckout(opts);


// Variables/objects for Mage Onepage
var quoteBaseGrandTotal = <?php echo (float)$this->getQuoteBaseGrandTotal(); ?>;
var checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
var lastPrice;

var ShippingMethod = Class.create();
var Review = Class.create();

// Poll if payment method is set ("Place Order" is loaded via ajax and can't depend on widget events)
var restrictInterval = setInterval(function() {
    if (!amazonPaymentsMageCheckout.hasReviewLoader) {
        if (amazonPaymentsMageCheckout.hasPayment) {
            amazonPaymentsMageCheckout.restrictPlaceOrder(false);
        } else {
            amazonPaymentsMageCheckout.restrictPlaceOrder(true, true);
        }
    }
}, 100);
</script>


<!-- Address Book Widget JS -->
<script>

new OffAmazonPayments.Widgets.AddressBook({
  sellerId: '<?php echo $this->getSellerId(); ?>',
  onOrderReferenceCreate: function(orderReference) {
      amazonPaymentsMageCheckout.amazonOrderReferenceId = orderReference.getAmazonOrderReferenceId();
  },
  onAddressSelect: function(orderReference) {
      amazonPaymentsMageCheckout.setShippingMethod();
      amazonPaymentsMageCheckout.hasPayment = false;
  },
  design: {
     designMode: 'responsive'
  },
  onError: function(error) {
    if (error.getErrorCode() == "BuyerSessionExpired") {
         window.top.location.href = '<?php echo $this->getUrl('checkout/amazon_payments/clear'); ?>';
    }
    console.log(error.getErrorMessage());
  }
}).bind("amazon-widget-address");
</script>


<!-- Wallet Widget JS -->
<script>
function loadAmazonWallet() {
    new OffAmazonPayments.Widgets.Wallet({
      sellerId: '<?php echo $this->getSellerId(); ?>',
        design: {
          designMode: 'responsive',
      },

      onPaymentSelect: function(orderReference) {
          amazonPaymentsMageCheckout.hasPayment = true;
      },
      onError: function(error) {
          console.log(error.getErrorMessage());
      }
    }).bind("amazon-widget-wallet");
}

loadAmazonWallet();
</script>
